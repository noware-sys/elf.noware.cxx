.PHONY: clean

QUEX_PATH = /opt/quex
LIB_PATH = /root/Documents/C++/NoWare/noware
COMPILER = g++
IN = main.cpp $(LIB_PATH)/tools.cpp $(LIB_PATH)/mathematics.cpp $(LIB_PATH)/network/connection.cpp $(LIB_PATH)/network/ip.cpp $(LIB_PATH)/network/tcp.cpp $(LIB_PATH)/network/udp.cpp $(LIB_PATH)/containers/variable.cpp $(LIB_PATH)/containers/any.cpp $(LIB_PATH)/cluster/interpreter.cpp $(LIB_PATH)/cluster/processor.cpp  $(LIB_PATH)/network/messaging.cpp $(LIB_PATH)/cluster/memory.cpp $(LIB_PATH)/cluster/cluster.cpp
OUT = main.do
IN_QUEX = quex-example.cpp
OUT_QUEX = quex-example.do
#   COMPILER = g++ -o main.exe

ifdef ASSERTS_ENABLED
	CCFLAG_ASSERTS = # By default, asserts are enabled.
else 
	CCFLAG_ASSERTS = -DQUEX_OPTION_ASSERTS_DISABLED
endif

#ADD_FLAGS := #
#COMPILER_FLAGS = -ggdb -pedantic -Wconversion -Wall -W -std=c++11 -std=gnu++11 -m64 -o main.do
COMPILER_FLAGS = -g -ggdb -pedantic -fpermissive -Wconversion -Wall -W -Wmain -Wcomment -std=c++11 -I . -I $(QUEX_PATH) -I /usr/include/boost -I /root/Documents/C++/NoWare $(CCFLAG_ASSERTS) -l boost_system -l boost_serialization -l boost_thread
#CC = $(COMPILER) \
	 -I ./ -I $(QUEX_PATH)  \
	 $(COMPILER_FLAGS) \
	$(CCFLAG_ASSERTS)
     # -DQUEX_OPTION_ASSERTS_DISABLED \
     # -DQUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED \
     # -DQUEX_OPTION_DEBUG_SHOW \

ifndef QUEX_PATH
    $(error The environment variable QUEX_PATH is not defined!)
endif

include $(QUEX_PATH)/quex/code_base/core.mkd

all:
	cd ./lexer;
	#export QUEX_PATH=$(QUEX_PATH);
	export QUEX_PATH;
	python2 $(QUEX_PATH)/quex.py --suppress 4 --engine lexical_analyzer -i lexical_analyzer.qx;
	
	cd ..
	$(COMPILER) $(COMPILER_FLAGS) -o $(OUT) $(IN);
	chmod +x $(OUT);

clean:
	#rm --force *.do *.run *.exe *.bin lexical_analyzer* *.bak *.E lexer
	#rm --force *.do lexical_analyzer* *.bak *.E lexer
	rm --force *.do lexer/lexical_analyzer lexer/lexical_analyzer.cpp lexer/lexical_analyzer-configuration lexer/lexical_analyzer-token lexer/lexical_analyzer-token_ids *.bak *.E
