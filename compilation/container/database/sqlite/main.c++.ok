//#include <Poco/any.h>
#include <iostream>
#include <sstream>
#include <fstream>
#include <algorithm>	// For for_each ()
#include <omp.h>
#include <unordered_map>
#include <typeinfo>
#include <list>

// Boost:
#include <boost/any.hpp>
#include <boost/thread.hpp>
// Boost serialization:
#include <boost/serialization/serialization.hpp>
#include <boost/serialization/split_member.hpp>	// For separating reading and writing.
#include <boost/serialization/list.hpp>
#include <boost/archive/text_oarchive.hpp>
#include <boost/archive/text_iarchive.hpp>
//#include <boost/archive/binary_oarchive.hpp>
//#include <boost/archive/binary_iarchive.hpp>

//#include <string>
//#include <stack>

#include <noware/containers/databases/sqlite.h++>
//#include <noware/containers/entity.h++>

//#include <noware/containers/text.h++>
//#include <noware/containers/any.hpp>
//#include <NoWare/Container/Variable.h>
//#include <noware/containers/array.hpp>
//#include <NoWare/Containers/Dynamic.h>
//#include <NoWare/Containers/Dynamic.cpp>
//#include "MPI.h"
//#include <noware/cluster.h++>
//#include "Memory.h"
//#include "HPC.cpp"
//#include "Numerical Strings.h"
//#include <vector>
//struct My
//{
//	int x, y;
//};

//void display_array (const noware::array <unsigned short int, unsigned short int> &);

void display_array (const LIB::NAME_A <LIB::NAME_A <LIB::NAME_V, LIB::NAME_V>, LIB::NAME_V> & arr)
{
	std::cout << "array =>";
	std::cout << std::endl;
	std::cout << '[';
	
	for (const LIB::NAME_A <LIB::NAME_A <LIB::NAME_V, LIB::NAME_V>, LIB::NAME_V>::package & row : arr)
	{
		std::cout << std::endl;
		std::cout << '\t' << '[' << row.k << "] =>";
		std::cout << std::endl;
		std::cout << '\t' << '[';
		std::cout << std::endl;
		
		for (const LIB::NAME_A <LIB::NAME_V, LIB::NAME_V>::package & column : row.v)
		{
			std::cout << "\t\t" << '[' << column.k << ']' << " => " << '[' << column.v << ']' << std::endl;
		}
		
		std::cout << '\t' << ']';
		std::cout << std::endl;
	}
	
	std::cout << ']';
	std::cout << std::endl;
}

signed int main (unsigned int argc, char * argv [])
{
	//using boost::any_cast;
	using namespace std;
	using namespace noware;
	
	for (unsigned int i = 0; i < argc; ++ i)
		cout << argv [i] << ' ';
	cout << endl;
	
	cout << "Argument count: " << argc << endl;
	cout << endl;
	
	databases::sqlite db ("/srv/public/adminer/test-1.db");
	
	LIB::NAME_A <LIB::NAME_A <LIB::NAME_V, LIB::NAME_V>, LIB::NAME_V> result;
	
	cout << db.query ("PRAGMA foreign_keys = true;") << endl;
	
/*
	// Create the table and create the index.
	cout <<
	db -> query (NULL, "\
		\n\
		CREATE TABLE IF NOT EXISTS \"Entities\"\n\
		(\n\
			\"Group\" none NOT NULL DEFAULT '',\n\
			\"Name: Reference\" none NULL DEFAULT NULL,\n\
			\"Name\" none NOT NULL,\n\
			\"Content: Reference\" none NULL DEFAULT NULL,\n\
			\"Content\" none NULL DEFAULT NULL\n\
		);\n\
		\n\
		CREATE UNIQUE INDEX IF NOT EXISTS \"Uniqueness\" ON \"Entities\" (\"Group\", \"Name\");\n\
		")
	<< endl
	;
*/	
	// Create the table.
	cout <<
	db.query ("\
		CREATE TABLE IF NOT EXISTS \"Entities\"\n\
		(\n\
			\"Group\" none NOT NULL DEFAULT '',\n\
			\"Name: Reference\" none NULL DEFAULT NULL,\n\
			\"Name\" none NOT NULL,\n\
			\"Content: Reference\" none NULL DEFAULT NULL,\n\
			\"Content\" none NULL DEFAULT NULL\n\
		);\n\
		\n\
		CREATE UNIQUE INDEX IF NOT EXISTS \"Uniqueness\" ON \"Entities\" (\"Group\", \"Name\");\
		")
	<< endl
	;
	
	//// Create the index.
	//cout <<
	//db.query ("\
	//	CREATE UNIQUE INDEX IF NOT EXISTS \"Uniqueness\" ON \"Entities\" (\"Group\", \"Name\")\
	//	")
	//<< endl
	//;
	
	//cout << db.query (result, "SELECT \"Name\", \"Content\" FROM \"Entities\"") << endl;
	//cout << endl;
	//cout << result << endl;
	//display_array (result);
	
	LIB::NAME_A <LIB::NAME_V, LIB::NAME_V> arg_select, arg_insert, arg_delete, arg_update;
	
	arg_select [1] = "Test 1.2: Name";
	
	arg_insert [1] = "Test 1.2: Name";
	arg_insert [2] = 0;
	arg_insert [3] = "First";
	arg_insert [4] = 0;
	arg_insert [5] = "FirstName";
	
	arg_insert [6] = "Test 1.2: Name";
	arg_insert [7] = 0;
	arg_insert [8] = "Last";
	arg_insert [9] = 0;
	arg_insert [10] = "LastName";
	
	arg_delete [1] = "Test 1";
	
	//arg_update [1] = "Test 1";
	
	//cout << db.query (result, "SELECT \"Group\", \"Name\", \"Content\" FROM \"Entities\" WHERE \"Group\" = ?", arg_select) << endl;
	
	//display_array (result);
	
	//cout << db.query ("BEGIN") << endl;
	
	cout << db.query ("INSERT OR IGNORE INTO \"Entities\" (\"Group\", \"Name: Reference\", \"Name\", \"Content: Reference\", \"Content\") VALUES (?, ?, ?, ?, ?), (?, ?, ?, ?, ?)", arg_insert) << endl;
	cout << db.effect () << endl;
	
	//cout << db.query ("DELETE FROM \"Entities\" WHERE \"Group\", = ?", arg_delete) << endl;
	
	//cout << db.query ("COMMIT") << endl;
	
	
	cout << db.query (result, "SELECT \"Group\", \"Name\", \"Content\" FROM \"Entities\" WHERE \"Group\" = ?", arg_select) << endl;
	cout << db.effect () << endl;
	
	
	arg_select [1] = 10;
	
	cout << db.query (result, "SELECT \"Group\", \"Name\", \"Content\" FROM \"Entities\" WHERE \"Group\" = ?", arg_select) << endl;
	cout << result.size () << endl;
	cout << db.effect () << endl;
	
	display_array (result);
}

