start = GLOBAL;

header
{
	#include <cstdlib>	// For atoi (), atof () and other things.
}

/*
	body
	{
		// ...
	}

	init
	{
		// ...
	}
*/

define
{
	// Note: "D" stands for "definition".

	D_NEW_LINE							\r?\n
	//D_WHITESPACE						[ \t(\r?\n)\v\f]+	// Replaced by [:space:]?
	D_WHITESPACE						[:space:]+

	D_COMMENT_BLOCK						"//"
	D_COMMENT_STREAM_BEGINNING			"/*"
	D_COMMENT_STREAM_ENDING				"*/"

	D_NUMBER							(\+|-)?[:digit:]+((\.|,)[:digit:]*)?	// A real number.
	D_VARIABLE							\$
	D_IDENTIFIER						\$[_:alnum:]+	// The name of a variable.
	
	D_MAIN_BEGINNING					"main"[:space:]*\(\)[:space:]*"{"
	// Keywords:
	//KEY_OBJECT	"object"
	//KEY_	
	D_PRAGMA							"pragma"
	D_STATEMENT_END						";"

	D_QUOTE_SINGLE						"'"
	D_QUOTE_DOUBLE						"\""
	D_BACKSLASH							"\\"
	D_BACKSLASHED_QUOTE_DOUBLE			"\\\""
	D_BACKSLASHED_BACKSLASH				"\\\\"
}

token
{
	//WHITESPACE;
	//OBJECT;
	//FUNCTION;
	//NUMBER;
	//IDENTIFIER;
	//OUTPUT;
	//INPUT;
	TRUE;
	FALSE;
	IF;
	ELSE;
	WHILE;
	DO;
	FOR;
	EACH;
	BREAK;
	CONTINUE;
	FUNCTION;
	USING;
	NAMESPACE;
	OBJECT;
	PUBLIC;
	PRIVATE;
	PROTECTED;
	FRIEND;
	VOID;
	NULL;
	SWITCH;
	CASE;
	DEFAULT;
	GOTO;
	//[]	// ARRAY
	RETURN;
	TRY;
	CATCH;
	THROW;
	NEW;
	STATIC;
	UNSET;
	GLOBAL;
	//COPY/CLONE

	PRAGMA_START;
	PRAGMA_END;
	INCLUDE_START;
	SERIALIZE_END;
	FUNCTION_START;
	OBJECT_START;
	INCLUDE_START;
	INCLUDE_END;
	STRING_ABSOLUTE_START;
	STRING_RELATIVE_START;
	STRING_ABSOLUTE_END;
	STRING_RELATIVE_END;

	QUOTE_SINGLE;
	QUOTE_DOUBLE;

	MAIN_BEGINNING;
}

mode END_OF_FILE :
<inheritable: only>
{
	<<EOF>>
	{
		self_send (QUEX_TKN_TERMINATION);

		RETURN;
	}
}

mode COMMENT : END_OF_FILE
<inheritable: only>
<skip: {D_WHITESPACE}>
<skip_nested_range: {D_COMMENT_STREAM_BEGINNING} {D_COMMENT_STREAM_ENDING}>
{
	// For block commenting:
	{D_COMMENT_BLOCK}([inverse({D_NEW_LINE})]|({D_BACKSLASH}{D_WHITESPACE}*{D_NEW_LINE}))*{D_NEW_LINE}
	//"//"([^\n]|(\\[ \t]*\r?\n))*\r?\n
	{
		// We are within a comment. Do not do anything.
	}
}

mode SCOPE : COMMENT
<inheritable: only>
{
	
}

mode EXPRESSION : COMMENT
//<inheritable: only>
{
	
}

/*
mode CONDITION : COMMENT
<inheritable: only>
{
	
}
*/

mode GLOBAL : COMMENT
{
	//{D_MAIN_BEGINNING}	=>	GOSUB (MAIN, QUEX_TKN_MAIN_START);
	{D_PRAGMA}	=>	GOSUB (PRAGMA, QUEX_TKN_PRAGMA_START);
	"function"	=>	GOSUB (FUNCTION, QUEX_TKN_FUNCTION_START);
	"object"	=>	GOSUB (OBJECT, QUEX_TKN_OBJECT_START);
	//{D_NUMBER}				=> QUEX_TKN_NUMBER(number=atof((char*)(Lexeme)));
	//"namespace"	=>	GOSUB (NAMESPACE, QUEX_TKN_NAMESPACE_START);	

	{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_START);
	{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_START);
}

mode MAIN : COMMENT
{
}

mode FUNCTION : COMMENT
{
}

mode OBJECT : COMMENT
{
}

mode PRAGMA : COMMENT
{
	"serialize"	=> GOUP (QUEX_TKN_PRAGMA_END);
/*	{
		GOUP (QUEX_TKN_PRAGMA_END);

		//RETURN;
	}
*/
	"include"	=> GOSUB (INCLUDE, QUEX_TKN_INCLUDE_START);

	"}"	=> GOUP (QUEX_TKN_PRAGMA_END);
}

mode SERIALIZE : COMMENT
{
	{D_STATEMENT_END}	=> GOUP (QUEX_TKN_SERIALIZE_END);
/*	{
		GOUP (QUEX_TKN_SERIALIZE_END);

		RETURN;
	}
*/
	{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_START);
	{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_START);
}

mode INCLUDE : COMMENT
{
	{D_STATEMENT_END}
	//{
		=> GOUP (QUEX_TKN_INCLUDE_END);

		//RETURN;
	//}

	{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_START);
	{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_START);
}

mode STRING_ABSOLUTE : END_OF_FILE
{
	on_entry
	{
		self_accumulator_clear ();
	}
	
	on_exit
	{
		self_accumulator_flush (QUEX_TKN_STRING_ABSOLUTE_END); 
	}

	//{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_QUOTE_SINGLE);
	{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_STRING_ABSOLUTE_END);

	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd); 
	}
}

mode STRING_RELATIVE : END_OF_FILE
{
	on_entry
	{
		self_accumulator_clear ();
	}
	
	on_exit
	{ 
		self_accumulator_flush (QUEX_TKN_STRING_RELATIVE_END);
//		self_send(QUEX_TKN_QUOTE_DOUBLE);
	}
/*

	{D_BACKSLASHED_BACKSLASH}
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}

	{D_BACKSLASHED_QUOTE_DOUBLE}
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}

	{D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER (text=Lexeme);
*/
	{D_QUOTE_DOUBLE}	=> GOUP (QUEX_TKN_STRING_RELATIVE_END);
	//{D_QUOTE_DOUBLE}	=> GOUP (QUEX_TKN_QUOTE_DOUBLE);
/*
	{
		self << MAIN;

		RETURN;
	}
*/	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd); 
	}
}

//mode NAMESPACE : END_OF_FILE
//{
//	
//}
