/*
	()	Parantheses
	[]	Brackets
	{}	Braces
	⟨⟩		Chevrons
	<>	Inequality signs
	&		Ampersand
	^		Caret
*/

/*
	"echo" alternatives:

	cout
	display
	send
	give
	set
	talk
	chat
	respond
	put

	for inputting:

	cin
	get
	receive
	listen
	take

	for both:

	transfer
	copy
	read/write


*/

/*
	#include <...>[, ""[, ...]];
	
	Keywords:
	
	true
	false
	if
	else
	while
	do
	for
	each
	break
	continue
	using
	namespace
	object	// Equivalent to enum, struct, or class. All members are public, by default.
	public
	private
	protected
	friend
	null
	switch ([, ...])
	case
	default
	goto
	//[]	// array
	return
	try
	catch ()
	throw
	static
	new
	unset ()	// Should this be inherited from a root object, and not global?
	global			// Program-wide.
	superblobal		// Cluster-wide. Admins only.
	//copy/clone
	
	// Types:
	int
	fraction
	string
	bool
	void
*/

start = SCOPE;

header
{
	#include <cstdlib>	// For atoi (), atof () and other things.
	#include <stdlib.h>	// For atoll ().
}

/*
	body
	{
		// ...
	}

	init
	{
		// ...
	}
*/

define
{
	// Note: "D" stands for "definition".
	
	D_NEW_LINE							\r?\n
	//D_WHITESPACE						[ \t(\r?\n)\v\f]+	// Replaced by [:space:]?
	//D_WHITESPACE						[ \t\r?\n\v\f]+	// Replaced by [:space:]?
	D_WHITESPACE						[:space:]+
	
	D_COMMENT_BLOCK						"//"
	D_COMMENT_STREAM_BEGINNING			"/*"
	D_COMMENT_STREAM_ENDING				"*/"
	
	D_NUMBER							(\+|-)?[:digit:]+((\.|,)[:digit:]*)?	// A real number.
	D_INTEGER							(\+|-)?[:digit:]+	// An integer.
	//D_VARIABLE							\$
	//D_IDENTIFIER						\$[_a-zA-Z0-9]+	// The name of a variable.
	
	//D_MAIN_BEGINNING					"main"[:space:]*\(\)[:space:]*
	D_MAIN_BEGINNING					"main"[:space:]*\([:space:]*\)
	// Keywords:
	//KEY_OBJECT	"object"
	//KEY_	
	//D_PRAGMA							"pragma"
	D_PRAGMA							"#"
	D_STATEMENT_END						";"
	
	//D_DIVISION							[^/]?"/"[^/]?
	D_DIVISION							inverse("\/{2,}")	// Or "\/\/+"
	//D_DIVISION							inverse("/"{2,})
	
	//D_PARENTHESIS_BEGINNING				"("
	
	D_QUOTE_SINGLE						"'"
	//D_QUOTE_DOUBLE						[\]?["]{1}
	//D_QUOTE_DOUBLE						inverse(\\)"\""
	//D_QUOTE_DOUBLE						[^\\]?"\""
	//D_QUOTE_DOUBLE						[^\\]?"
	//D_QUOTE_DOUBLE						[^\\]?"\""
	D_QUOTE_DOUBLE						"\""
	D_BACKSLASH							"\\"
	D_BACKSLASHED_QUOTE_DOUBLE			"\\\""
	D_BACKSLASHED_BACKSLASH				"\\\\"
	D_OUTPUT							"echo"
	D_ENDL								"\\"[Nn]
	D_TAB								"\\"[Tt]
	//D_ENDL								"endl"
	D_CONCATENATION						"."
	D_IDENTIFIER						[_a-zA-Z0-9]+	// The name of a variable, of a function, of a class/struct, of an enum, etc.
	D_ANY_CHARACTER						.
}

token
{
	//PREPROCESSOR_DIRECTIVE
	// PRAGMA;
	SERIALIZE;
	INCLUDE;
	
	FAILURE;
	
	STATEMENT_END;
	IDENTIFIER;
	IDENTIFIER_VARIABLE;
	CONCATENATION;
	OUTPUT;
	//ENDL;
	NUMBER;
	
	EQUALITY_RELATIVE;
	EQUALITY_ABSOLUTE;
	INEQUALITY_RELATIVE;
	INEQUALITY_ABSOLUTE;
	ASSIGNMENT;
	NEGATION;
	
	ADDITION;
	SUBSTRACTION;
	MULTIPLICATION;
	DIVISION;
	EXPONENTIATION;
	MODULO;
	
	STRING;
	CHARACTER;
	ENDL;
	TAB;
	
	//STRING_BEGINNING;
	//STRING_END;
	
	STRING_ABSOLUTE_BEGINNING;
	STRING_ABSOLUTE_END;
	
	STRING_RELATIVE_BEGINNING;
	STRING_RELATIVE_END;
	
	PARENTHESIS_BEGINNING;
	PARENTHESIS_END;
	
	BRACE_BEGINNING;
	BRACE_END;
	
	BACKSLASHED_QUOTE_DOUBLE;
	BACKSLASHED_BACKSLASH;
	
	LOGIC_AND;
	LOGIC_OR;
	
	GREATER;
	GREATER_EQUAL;
	LOWER;
	LOWER_EQUAL;
	
	//DELIMITER_NAMESPACE;
	
	FUNCTION_DEFINITION;
}

mode FAILURE :
<inheritable: only>
{
	<<EOF>>
	{
		self_send (QUEX_TKN_TERMINATION);
		
		RETURN;
	}
	
	<<FAIL>>
	{
		self_send (QUEX_TKN_FAILURE);
		
		RETURN;
	}
}

mode COMMENT : FAILURE
<inheritable: only>
<skip: {D_WHITESPACE}>
<skip_nested_range: {D_COMMENT_STREAM_BEGINNING} {D_COMMENT_STREAM_ENDING}>
{
	// For block commenting:
	//{D_COMMENT_BLOCK}([inverse({D_NEW_LINE})]|({D_BACKSLASH}{D_WHITESPACE}*{D_NEW_LINE}))*{D_NEW_LINE}
	"//"([^\n]|(\\[ \t]*\r?\n))*\r?\n
	{
		// We are within a comment. Do not do anything.
	}
}

mode SCOPE : COMMENT
{
	//{D_MAIN_BEGINNING}	=>	GOSUB (MAIN, QUEX_TKN_MAIN_START);
	//{D_PRAGMA}	=>	GOSUB (PRAGMA, QUEX_TKN_PRAGMA);
	{D_PRAGMA}{D_WHITESPACE}*"serialize"	=> QUEX_TKN_SERIALIZE;
	{D_PRAGMA}{D_WHITESPACE}*"include"	=> QUEX_TKN_INCLUDE;
	\${D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER_VARIABLE (Lexeme);
	{D_OUTPUT}	=> GOSUB (EXPRESSION, QUEX_TKN_OUTPUT);
	"function" => GOSUB (FUNCTION_DEFINITION, QUEX_TKN_FUNCTION_DEFINITION);
	{D_NUMBER}				=> QUEX_TKN_NUMBER (Lexeme);
	
	{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_BEGINNING);
	{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_BEGINNING);
	//{D_QUOTE_DOUBLE}	=> GOSUB (STRING, QUEX_TKN_STRING_BEGINNING);
	
	{D_STATEMENT_END}	=> QUEX_TKN_STATEMENT_END;
	{D_CONCATENATION}	=> QUEX_TKN_CONCATENATION;
	
	{D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER (Lexeme);
	//{D_EXPRESSION}	=> GOSUB (EXPRESSION, QUEX_TKN_EXPRESSION);
	
	
	"{"	=> GOSUB (SCOPE, QUEX_TKN_BRACE_BEGINNING);
	"}"	=> GOUP (QUEX_TKN_BRACE_END);
	//"{"	=> QUEX_TKN_BRACE_BEGINNING;
	//"}"	=> QUEX_TKN_BRACE_END;
	"("	=> GOSUB (EXPRESSION, QUEX_TKN_PARENTHESIS_BEGINNING);
	
	"="	=> GOSUB (EXPRESSION, QUEX_TKN_ASSIGNMENT);
	
	// {D_OUTPUT}	=> QUEX_TKN_OUTPUT;
	
	//{D_ENDL}	=> QUEX_TKN_ENDL;
	//"function"	=>	GOSUB (FUNCTION, QUEX_TKN_FUNCTION_START);
	//"object"	=>	GOSUB (OBJECT, QUEX_TKN_OBJECT_START);
	//{D_NUMBER}				=> QUEX_TKN_NUMBER (number=atof((char*)(Lexeme)));
	//{D_INTEGER}				=> QUEX_TKN_NUMBER (number=atol((char*)(Lexeme)));
	//"namespace"	=>	GOSUB (NAMESPACE, QUEX_TKN_NAMESPACE_START);	
}

mode STRING_ABSOLUTE : FAILURE
{
/*
	on_entry
	{
		self_accumulator_clear ();
	}
	
	on_exit
	{
		self_accumulator_flush (QUEX_TKN_STRING_ABSOLUTE_END);
		//self_send (QUEX_TKN_STRING);
	}
*/
	//{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_QUOTE_SINGLE);
	//{D_QUOTE_DOUBLE}	=> GOUP; //(QUEX_TKN_STRING);
	{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_STRING_ABSOLUTE_END);
	
	{D_ANY_CHARACTER}	=> QUEX_TKN_CHARACTER (Lexeme);
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}

mode STRING_RELATIVE : FAILURE
{
/*
	on_entry
	{
		self_accumulator_clear ();
	}
	
	on_exit
	{
		self_accumulator_flush (QUEX_TKN_STRING_RELATIVE_END);
		//self_send (QUEX_TKN_STRING);
	}
*/
	{D_ENDL}	=> QUEX_TKN_ENDL (Lexeme);
	{D_TAB}			=> QUEX_TKN_TAB (Lexeme);
	{D_BACKSLASHED_QUOTE_DOUBLE}	=> QUEX_TKN_BACKSLASHED_QUOTE_DOUBLE (Lexeme);
	{D_BACKSLASHED_BACKSLASH}	=> QUEX_TKN_BACKSLASHED_BACKSLASH (Lexeme);
	
	//{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_QUOTE_SINGLE);
	//{D_QUOTE_DOUBLE}	=> GOUP; //(QUEX_TKN_STRING);
	{D_QUOTE_DOUBLE}	=> GOUP (QUEX_TKN_STRING_RELATIVE_END);
	
	{D_ANY_CHARACTER}	=> QUEX_TKN_CHARACTER (Lexeme);
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}

mode EXPRESSION : COMMENT
{
	"+"	=> QUEX_TKN_ADDITION;
	"-"	=> QUEX_TKN_SUBSTRACTION;
	"*"	=> QUEX_TKN_MULTIPLICATION;
	{D_DIVISION}	=> QUEX_TKN_DIVISION;
	"%"	=> QUEX_TKN_MODULO;
	"^"	=> QUEX_TKN_EXPONENTIATION;
	
	"&&"		=> QUEX_TKN_LOGIC_AND;
	"||"		=> QUEX_TKN_LOGIC_OR;
	
	"==="	=> QUEX_TKN_EQUALITY_ABSOLUTE;
	"!=="	=> QUEX_TKN_INEQUALITY_ABSOLUTE;
	"=="	=> QUEX_TKN_EQUALITY_RELATIVE;
	"!="	=> QUEX_TKN_INEQUALITY_RELATIVE;
	"!"		=> QUEX_TKN_NEGATION;
	
	">"	=> QUEX_TKN_GREATER;
	"<"	=> QUEX_TKN_LOWER;
	">="	=> QUEX_TKN_GREATER_EQUAL;
	"<="	=> QUEX_TKN_LOWER_EQUAL;
	
	{D_STATEMENT_END}	=> GOUP (QUEX_TKN_STATEMENT_END);
	")"	=> GOUP (QUEX_TKN_PARENTHESIS_END);
	"("	=> GOSUB (EXPRESSION, QUEX_TKN_PARENTHESIS_BEGINNING);
	//"("	=> QUEX_TKN_PARENTHESIS_BEGINNING;
	
	\${D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER_VARIABLE (Lexeme);
	{D_NUMBER}	=> QUEX_TKN_NUMBER (Lexeme);
	{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_BEGINNING);
	{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_BEGINNING);
	{D_CONCATENATION}	=> QUEX_TKN_CONCATENATION;
	"endl"	=> QUEX_TKN_ENDL;
	"tab"	=> QUEX_TKN_TAB;
	{D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER (Lexeme);	// For function calls.
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}

mode FUNCTION_DEFINITION : COMMENT
{
	{D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER (Lexeme);
	
	"("	=> GOSUB (FUNCTION_DEFINITION_PARAMETERS, QUEX_TKN_PARENTHESIS_BEGINNING);
	
	"{"	=> QUEX_TKN_BRACE_BEGINNING;
	
	"}"	=> GOUP (QUEX_TKN_BRACE_END);
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}

mode FUNCTION_DEFINITION_PARAMETERS : COMMENT
{
	")"	=> GOUP (QUEX_TKN_PARENTHESIS_END);
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}
