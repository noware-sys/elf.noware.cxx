start = GLOBAL;

header
{
	#include <cstdlib>	// For atoi (), atof () and other things.
	#include <stdlib.h>	// For atoll ().
}

/*
	body
	{
		// ...
	}

	init
	{
		// ...
	}
*/

define
{
	// Note: "D" stands for "definition".
	
	D_NEW_LINE							\r?\n
	//D_SPACE								[ \t(\r?\n)\v\f]+	// Replaced by [:space:]?
	//D_SPACE								[:space:]+
	//D_BLANK								[:blank:]+
	D_SPACE								[:space:]
	D_BLANK								[:blank:]
	
	D_COMMENT_BLOCK						"//"
	D_COMMENT_STREAM_BEGINNING			"/*"
	D_COMMENT_STREAM_ENDING				"*/"
	
	D_NUMBER							(\+|-)?[:digit:]+((\.|,)[:digit:]*)?	// A real number.
	D_INTEGER							(\+|-)?[:digit:]+	// An integer.
	//D_VARIABLE							\$
	D_IDENTIFIER						\$[_a-zA-Z0-9]+	// The name of a variable.
	
	//D_MAIN_BEGINNING					"main"[:space:]*\(\)[:space:]*
	D_MAIN_BEGINNING					"main"[:space:]*\([:space:]*\)
	// Keywords:
	//KEY_OBJECT	"object"
	//KEY_	
	//D_PRAGMA							"pragma"
	D_PRAGMA							"#"
	D_STATEMENT_END						";"
	
	D_DIVISION							[^/]"/"[^/]
	//D_DIVISION							inverse("/"{2,})
	
	D_ANY_CHAR							.
	D_QUOTE_SINGLE						[^\\]"'"
	//D_QUOTE_DOUBLE						[\]?["]{1}
	//D_QUOTE_DOUBLE						inverse(\\)"\""
	//D_QUOTE_DOUBLE						[^\\]?"\""
	//D_QUOTE_DOUBLE						[^\\]?"
	//D_QUOTE_DOUBLE						[^\\]?"\""
	D_QUOTE_DOUBLE						[^\\]"\""
	D_BACKSLASH							"\\"
	D_BACKSLASHED_QUOTE_DOUBLE			"\\\""
	D_BACKSLASHED_BACKSLASH				"\\\\"
	D_OUTPUT							"echo"
	D_ENDL								"endl"
	D_CONCATENATION						"."
}

token
{
	//PREPROCESSOR_DIRECTIVE
	PRAGMA;
	SERIALIZE;
	INCLUDE;
	
	FAILURE;
	
	STATEMENT_END;
	IDENTIFIER;
	CONCATENATION;
	OUTPUT;
	ENDL;
	NUMBER;
	
	EQUALITY_RELATIVE;
	EQUALITY_ABSOLUTE;
	INEQUALITY_RELATIVE;
	INEQUALITY_ABSOLUTE;
	ASSIGNMENT;
	NEGATION;
	
	ADDITION;
	SUBSTRACTION;
	MULTIPLICATION;
	DIVISION;
	EXPONENTIATION;
	MODULO;
	
	STRING;
	CHARACTER;
	
	//STRING_BEGINNING;
	//STRING_END;
	
	STRING_ABSOLUTE_BEGINNING;
	STRING_ABSOLUTE_END;
	
	STRING_RELATIVE_BEGINNING;
	STRING_RELATIVE_END;
	
	BRACE_BEGINNING;
	BRACE_END;
	
	COMMENT_BLOCK;
	COMMENT_BLOCK_END;
	//NEW_LINE;
	////COMMENT_BLOCK_ENDING_ESCAPER;
	//BACKSLASH;
}

mode FAILURE :
<inheritable: only>
{
	<<EOF>>
	{
		self_send (QUEX_TKN_TERMINATION);
		
		RETURN;
	}
	
	<<FAIL>>
	{
		self_send (QUEX_TKN_FAILURE);
		
		RETURN;
	}
}

mode COMMENT : FAILURE
<inheritable: only>
<skip: {D_SPACE}>
<skip_nested_range: {D_COMMENT_STREAM_BEGINNING} {D_COMMENT_STREAM_ENDING}>
{
	// For block commenting:
	//{D_COMMENT_BLOCK}([inverse({D_NEW_LINE})]|({D_BACKSLASH}{D_SPACE}*{D_NEW_LINE}))*{D_NEW_LINE}
	//{D_COMMENT_BLOCK}([inverse({D_NEW_LINE})]|([inverse({D_NEW_LINE})]{D_BACKSLASH}{D_BLANK}*{D_NEW_LINE}))*{D_NEW_LINE}
	//{D_COMMENT_BLOCK}[^{D_NEW_LINE}]|([^{D_NEW_LINE}]{D_BACKSLASH}{D_BLANK}*{D_NEW_LINE}))*{D_NEW_LINE}
	"//"([^\n]|(\\[ \t]*\r?\n))*\r?\n	=>	GOSUB (COMMENT_BLOCK, QUEX_TKN_COMMENT_BLOCK);
	//"//"[^\n]\n
	//"//"\n
	//{
	//	// We are within a comment. Do not do anything.
	//}
}

mode COMMENT_BLOCK
{
	inverse({D_BACKSLASH}){D_NEW_LINE}	=>	GOUP (QUEX_TKN_COMMENT_BLOCK_END);
	//{D_NEW_LINE}	=>	QUEX_TKN_NEW_LINE;
	//{D_BACKSLASH}	=>	QUEX_BACKSLASH;
}

mode GLOBAL : COMMENT
{
	//{D_MAIN_BEGINNING}	=>	GOSUB (MAIN, QUEX_TKN_MAIN_START);
	//{D_PRAGMA}	=>	GOSUB (PRAGMA, QUEX_TKN_PRAGMA);
	{D_PRAGMA}{D_SPACE}*"serialize"	=> QUEX_TKN_SERIALIZE;
	{D_PRAGMA}{D_SPACE}*"include"	=> QUEX_TKN_INCLUDE;
	{D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER (Lexeme);
	{D_STATEMENT_END}	=> QUEX_TKN_STATEMENT_END;
	{D_CONCATENATION}	=> QUEX_TKN_CONCATENATION;
	//{D_EXPRESSION}	=> GOSUB (EXPRESSION, QUEX_TKN_EXPRESSION);
	
	"=="	=> QUEX_TKN_EQUALITY_RELATIVE;
	"==="	=> QUEX_TKN_EQUALITY_ABSOLUTE;
	"!="	=> QUEX_TKN_INEQUALITY_RELATIVE;
	"!=="	=> QUEX_TKN_INEQUALITY_ABSOLUTE;
	"!"	=> QUEX_TKN_NEGATION;
	"="	=> QUEX_TKN_ASSIGNMENT;
	"+"	=> QUEX_TKN_ADDITION;
	"-"	=> QUEX_TKN_SUBSTRACTION;
	"*"	=> QUEX_TKN_MULTIPLICATION;
	{D_DIVISION}	=> QUEX_TKN_DIVISION;
	"^"	=> QUEX_TKN_EXPONENTIATION;
	"%"	=> QUEX_TKN_MODULO;
	
	"{"	=> QUEX_TKN_BRACE_BEGINNING;
	"}"	=> QUEX_TKN_BRACE_END;
	
	{D_OUTPUT}	=> QUEX_TKN_OUTPUT;
	{D_ENDL}	=> QUEX_TKN_ENDL;
	//"function"	=>	GOSUB (FUNCTION, QUEX_TKN_FUNCTION_START);
	//"object"	=>	GOSUB (OBJECT, QUEX_TKN_OBJECT_START);
	{D_NUMBER}				=> QUEX_TKN_NUMBER (Lexeme);
	//{D_NUMBER}				=> QUEX_TKN_NUMBER (number=atof((char*)(Lexeme)));
	//{D_INTEGER}				=> QUEX_TKN_NUMBER (number=atol((char*)(Lexeme)));
	//"namespace"	=>	GOSUB (NAMESPACE, QUEX_TKN_NAMESPACE_START);	
	
	
	{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_BEGINNING);
	{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_BEGINNING);
	//{D_QUOTE_DOUBLE}	=> GOSUB (STRING, QUEX_TKN_STRING_BEGINNING);
}

mode STRING_ABSOLUTE : FAILURE
{
/*
	on_entry
	{
		self_accumulator_clear ();
	}
	
	on_exit
	{
		self_accumulator_flush (QUEX_TKN_STRING_ABSOLUTE_END);
		//self_send (QUEX_TKN_STRING);
	}
*/
	//{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_QUOTE_SINGLE);
	//{D_QUOTE_DOUBLE}	=> GOUP; //(QUEX_TKN_STRING);
	{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_STRING_ABSOLUTE_END);
	
	{D_ANY_CHAR}	=> QUEX_TKN_CHARACTER (Lexeme);
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}

mode STRING_RELATIVE : FAILURE
{
/*
	on_entry
	{
		self_accumulator_clear ();
	}
	
	on_exit
	{
		self_accumulator_flush (QUEX_TKN_STRING_RELATIVE_END);
		//self_send (QUEX_TKN_STRING);
	}
*/
	//{D_QUOTE_SINGLE}	=> GOUP (QUEX_TKN_QUOTE_SINGLE);
	//{D_QUOTE_DOUBLE}	=> GOUP; //(QUEX_TKN_STRING);
	{D_QUOTE_DOUBLE}	=> GOUP (QUEX_TKN_STRING_RELATIVE_END);
	
	{D_ANY_CHAR}	=> QUEX_TKN_CHARACTER (Lexeme);
	
	<<FAIL>>
	{
		self_accumulator_add (Lexeme, LexemeEnd);
	}
}
