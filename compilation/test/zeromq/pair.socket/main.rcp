#QUEX_PATH = /usr/include/quex
#LIB = noware
LIB_PATH = /usr/include/noware
COMPILER = g++
CCOMPILER = gcc
# IN = main.c++ $(LIB_PATH)/mathematics.c++ $(LIB_PATH)/tools.c++ $(LIB_PATH)/network/endpoint.c++ $(LIB_PATH)/network/ip.c++ $(LIB_PATH)/network/ip/tcp.c++ $(LIB_PATH)/network/ip/udp.c++ $(LIB_PATH)/network/ip/mpi.c++ $(LIB_PATH)/network/mpi.c++ $(LIB_PATH)/network/connection.c++ $(LIB_PATH)/containers/variable.c++ $(LIB_PATH)/language/interpreter.c++ $(LIB_PATH)/machine/device.c++ $(LIB_PATH)/machine/devices/memory.c++ $(LIB_PATH)/machine/devices/processor.c++ $(LIB_PATH)/machine/network/communication/message.c++ $(LIB_PATH)/cluster/machine.c++
# IN = mathematics.obj tools.obj network-endpoint.obj network/ip.obj network-ip-tcp.obj network-ip-udp.obj network-ip-mpi.obj network-mpi.obj network-connection.obj containers-variable.obj language-interpreter.obj machine-device.obj machine-devices-memory.obj machine-devices-processor.obj machine-network-communication-message.obj cluster-machine.obj
#IN = sqlite.obj containers-databases-sqlite.obj containers-variable.obj tools.obj mathematics.obj
IN = 
OUT = main.act
OUT_32 = main-32.act

#COMPILER_FLAGS = -g -ggdb -pedantic -fpermissive -W -Wall -Wmain -Wcomment -Wconversion -Wunused-parameter -Wparentheses `pkg-config --cflags cln` -std=c++14 -I . -L . -I $(LIB_PATH) `pkg-config --libs cln`
COMPILER_FLAGS = -g -ggdb -pedantic -fpermissive -W -Wall -Wmain -Wcomment -Wconversion -Wunused-parameter -Wparentheses -std=c++14 -I . -L . -I $(LIB_PATH) -pthread -lzmq

#include $(QUEX_PATH)/quex/code_base/core.mkd
# include /usr/include/quex/quex/code_base/core.mkd

all : $(OUT)
$(OUT) :
	if test ! -f $(OUT);\
	then \
		#$(CC) $(IN); \
		#$(COMPILER) $(COMPILER_FLAGS) -o $(OUT) $(IN);\
		$(COMPILER) $(COMPILER_FLAGS) -o main.obj -c main.cxx;\
		\
		$(COMPILER) $(COMPILER_FLAGS) -o $(OUT) main.obj $(IN);\
	fi
	
	if test -f $(OUT) && test ! -x $(OUT);\
	#if test ! -x $(OUT);\
	then\
		chmod +x $(OUT);\
	fi
32:
	if test ! -f $(OUT_32);\
	then\
		#$(CC) $(IN);\
		#$(COMPILER) $(COMPILER_FLAGS) -m32 -o $(OUT_32) $(IN);\
		linux32 $(COMPILER) $(COMPILER_FLAGS) -o main.obj -c main.cxx;\
		\
		linux32 $(COMPILER) $(COMPILER_FLAGS) -o $(OUT) main.obj $(IN);\
	fi
	
	if test -f $(OUT_32) && test ! -x $(OUT_32);\
	#if test ! -x $(OUT_32);\
	then\
		chmod +x $(OUT_32);\
	fi
clean:
	rm --force main.act main.obj;

