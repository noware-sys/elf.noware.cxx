//#ifndef VARIABLE_CPP
//#define VARIABLE_CPP

//#include <cmath>
//#include <stdio.h>
//#include <ctype.h>
//#include <sstream>
//#include <iostream>
//#include "../default.h++"
//#include "group.h++"
//#include "text.h++"
//#include "variable.h++"
//#include "../Utilities.h"
//using namespace ::std;

template <typename value>
LIB::group <value>::iterator LIB::group <value>::iterator::iterator (void)
{
	current = NULL;
}

template <typename value>
value LIB::group <value>::iterator::operator * (void) const
{
	if (current == NULL)
		return value_;
	else
		return current -> current;
	
}

template <typename value>
bool LIB::group <value>::iterator::operator != (const LIB::group <value>::iterator & other)
{
	return current != other.current;
}

template <typename value>
const LIB::group <value>::iterator & LIB::group <value>::iterator::operator ++ (void)
{
	if (current != NULL)
	{
		current = current -> next;
	}
	
	return * this;
}

template <typename value>
LIB::group <value>::iterator LIB::group <value>::iterator::iterator (void)
{
	current = NULL;
}

template <typename value>
LIB::group <value>::container::container (void)
{
	previous = NULL;
	next = NULL;
}

template <typename value>
LIB::group <value>::container::container (const container & other)
{
	current = other.current;
	previous = other.previous;
	next = other.next;
}

template <typename value>
LIB::group <value>::group (void)
{
	values = NULL;
	locked = false;
}

template <typename value>
LIB::group <value>::group (const group <value> & other)
{
	* this = other;
}

template <typename value>
void LIB::group <value>::clear (void) const
{
	while (values != NULL)
		remove ();
}

template <typename value>
bool LIB::group <value>::add (void) const
{
	if (locked)
		return false;
		
	locked = true;
	
	if (values == NULL)
	{
		values = new container ();
		
		values -> next = values;
		values -> previous = values;
	}
	else
	{
		container temp = new container ();
		
		temp -> next = values;
		temp -> previous = values -> previous;
		
		values -> previous -> next = temp;
		values -> previous = temp;
	}
	
	locked = false;
	
	return true;
}

template <typename value>
value LIB::group <value>::remove (void) const
{
	if (locked)
		if (values == NULL)
			return value_;
		else
			return values -> previous;
	
	locked = true;
	
	
	container temp;
	
	temp = values -> previous;
	values -> previous = values -> previous -> previous;
	values -> previous -> next = values;
	
	// If there is one element remaining (the one which is being removed).
	if (temp == values)
		values = NULL;
	
	locked = false;
	
	value val = temp -> current;
	
	delete temp;
	
	return val;
}

template <typename value>
LIB::group <value>::iterator LIB::group <value>::begin (void) const
{
	iterator it;
	it.current = values;
	
	return it;
}

template <typename value>
LIB::group <value>::iterator LIB::group <value>::end (void) const
{
	iterator it;
	
	if (values == NULL)
		it.current = values;
	else
		it.current = values -> previous;
	
	return it;
}

template <typename value>
LIB::group <value> LIB::group <value>::operator = (const group <value> & other)
{
	if (other == this)
		return * this;
	
	clear ();
	
	for (const auto & element : other)
	{
		do
		{
		}
		while (!* this.add (element));
	}
	
	return * this;
}
