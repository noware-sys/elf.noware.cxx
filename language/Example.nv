/*
	Case sensitive.
	Object-Oriented.
	JavaScript Object Style Notation.
	
	? Uniqueness == Name + Type
		The type could be determined by the context.
	
	Type hinting.
*/
/*
	Basic things.
	{
		Declare things.
		Perform things.
	}
	
	///
	
	Basic words (including operators)?:
	
	function
	return
	boolean
	number(s)::
		natural
		integer
	number
	text
	null
	new
	space
	class
	=
	==
	===	(Like in PHP)
*/
include_once ("initialization.nv");	// Or ".ven"?

// This is the global scope.

namespace "system"
{
	/*
		// Directly declare the operator(s) instead.
		
		function declare/set/assign ([null])
		{
			// 
		}
	*/
	// Declare an entity.
	[type] function [operator]? "#" (null, null)
	{
		return [null];
	}
	
	// Evaluate an expression.
	[type] function [""] ()
	{
		return [null];
	}
	
	
	
	//function declare ("2nd constant", "the value", true/* boolean constant*/);	// ?
	
	"#"[whitespace]"var";	// "#var" is only declared here.
	
	#var = text . appended;
	# number = "123";	// This is still a number. Should it? Yes? Yes.
	
	# text = "text with special characters" . " and with appended text";
	
	
	// Additionally, this may be done:
	
	// Set the value to an (entity?) function.
	# ("a function") = function a_function () { /* ... */ };
	// Then, call it.
	# "a function" -> ();
	
	operator 1 2 3 ...
	"" (...)
	function (1, 2, 3(,) ...)
	
	(((cout << 1) << 2) << 3)
	
	
	// Declare a function without a name.
	// It would be visible within the scope it is declared, of course.
	// It would be called like " (arg)".
	//
	// !!!
	// But, what about expressions enclosed within parenthesis?
	// Maybe always have to declare like """ (arg)"?
	function [""]? () { /* ... */ };
	
	// Get the type of an entity.
	"Hi!" -> type () [== "text"];
	
	// Instead of "namespace".
	(class/space/entity/domain/zone/area/name)?namespace personal
	{
		function include_once (#"1st argument", #"second argument", /*...*/ /* Variable number of arguments? */)
		{
			// ...
			return (true);
		}
		
		// This is another function.
		"function" "include once" (null)
		{
			// ...
			"return" (! true);
		}
		
		entity/object/class/set/category/domain/type/space/zone "custom" [: [public/protected(/private ?)] other, ...]
		{
			public:
				null custom (null);		// Constructor.
				null ~custom (null);	// Destructor.
				const static [::..::number] #instances;
				[type] function operator + (void) const;
			protected:	// Inherited.
			private:	// Uninherited?
		}
		
		//custom #a_var ();
		#a_var = [new]? custom ();
	}
	
	// Can "re-declare" classes. ?
}

