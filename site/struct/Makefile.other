# PURPOSE: Makefile Demo Application of Quex
#
# ABSOLUTELY NO WARRANTY
#_______________________________________________________________________________
.PHONY: clean

ifndef QUEX_PATH
    $(error The environment variable QUEX_PATH is not defined!)
endif

include $(QUEX_PATH)/quex/code_base/core.mkd

ifdef ASSERTS_ENABLED_F
	CCFLAG_ASSERTS=# By default asserts are enabled
else 
	CCFLAG_ASSERTS=-DQUEX_OPTION_ASSERTS_DISABLED
endif

# (*) COMPILER SETTINGS ________________________________________________________
#     (change COMPILER to whatever you use as compiler on the command line,
#      e.g. "make COMPILER=icpc" will use intel's c++ compiler)
COMPILER   = g++ -ggdb -pedantic -Wconversion -Wall -W
ADD_FLAGS :=#

ifneq (,$(findstring sun, $(COMPILER)))
	ADD_FLAGS := +w
endif	

CC = $(COMPILER) -c       \
	 -I ./ -I $(QUEX_PATH)  \
	 $(ADD_FLAGS) $(CCFLAG_ASSERTS) 
     # -DQUEX_OPTION_ASSERTS_DISABLED
     # -DQUEX_OPTION_ASSERTS_WARNING_MESSAGE_DISABLED 
     # -DQUEX_OPTION_DEBUG_SHOW
	-o main.o
   
LD = $(COMPILER) 

# (*) RULES ____________________________________________________________________
# -- application
all:
	$(CC) main.cpp

lexical_analyzer:	main.o lexical_analyzer.o
	$(LD) -o $@ main.o lexical_analyzer.o

# Object files:
lexical_analyzer.o: lexical_analyzer.cpp
	$(CC) $< -o $@ 

main.o: ../main.cpp  lexical_analyzer.cpp
	$(CC) $< -o $@ 

# Macro expansions (only for debugging):
%.E: %.cpp
	$(CC) -E $< -o $@ 

EasyLexer.cpp: simple.qx $(QUEX_CORE)
	quex -i                 simple.qx  \
	     --engine           EasyLexer  \
		 --token-id-offset  0x1000

source-package:
	quex -i                 simple.qx  \
	     --engine           EasyLexer  \
		 --token-id-offset  0x1000     \
		 --post-categorizer            \
		 --source-package   lexer_mine

# (*) HELPERS __________________________________________________________________
clean:	
	rm -f lexical_analyzer* *.o *.bak *.E lexer
