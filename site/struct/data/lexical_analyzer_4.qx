start = GLOBAL;

header
{
	#include <cstdlib>	// For atoi (), atof () and other things.
}

/*
	body
	{
		// ...
	}

	init
	{
		// ...
	}
*/

define
{
	// Note: "D" stands for "definition".

	D_NEW_LINE							\r?\n
	//D_WHITESPACE						[ \t(\r?\n)\v\f]+	// Replaced by [:space:]?
	D_WHITESPACE						[:space:]+

	D_COMMENT_BLOCK						"//"
	D_COMMENT_STREAM_BEGINNING			"/*"
	D_COMMENT_STREAM_ENDING				"*/"

	D_NUMBER							(\+|-)?[:digit:]+((\.|,)[:digit:]*)?	// A real number.
	D_VARIABLE							\$
	D_IDENTIFIER						\$[_:alnum:]+	// The name of a variable.
	
	D_MAIN_BEGINNING					"main"[:space:]*\(\)[:space:]*"{"
	// Keywords:
	//KEY_OBJECT	"object"
	//KEY_	
	D_PRAGMA							"pragma"
	D_STATEMENT_END						";"

	D_QUOTE_SINGLE						"'"
	D_QUOTE_DOUBLE						"\""
	D_BACKSLASH							"\\"
	D_BACKSLASHED_QUOTE_DOUBLE			"\\\""
	D_BACKSLASHED_BACKSLASH				"\\\\"
	D_OUTPUT							"echo"
	D_CONCATENATION						"."
}

token
{
	//PREPROCESSOR_DIRECTIVE
	SERIALIZE;
	STATEMENT_END;
	IDENTIFIER;
	CONCATENATION;
	OUTPUT;
	ASSIGNMENT;
	
	ADDITION;
	SUBSTRACTION;
	MULTIPLICATION;
	DIVISION;
	MODULO;

	LEFT_BRACE;
	RIGHT_BRACE;
}

mode END_OF_FILE :
<inheritable: only>
{
	<<EOF>>
	{
		self_send (QUEX_TKN_TERMINATION);

		RETURN;
	}
}

mode COMMENT : END_OF_FILE
<inheritable: only>
<skip: {D_WHITESPACE}>
<skip_nested_range: {D_COMMENT_STREAM_BEGINNING} {D_COMMENT_STREAM_ENDING}>
{
	// For block commenting:
	{D_COMMENT_BLOCK}([inverse({D_NEW_LINE})]|({D_BACKSLASH}{D_WHITESPACE}*{D_NEW_LINE}))*{D_NEW_LINE}
	//"//"([^\n]|(\\[ \t]*\r?\n))*\r?\n
	{
		// We are within a comment. Do not do anything.
	}
}

mode GLOBAL : COMMENT
{
	//{D_MAIN_BEGINNING}	=>	GOSUB (MAIN, QUEX_TKN_MAIN_START);
	//{D_PRAGMA}	=>	GOSUB (PRAGMA, QUEX_TKN_PRAGMA_START);
	"#serialize"	=> QUEX_TKN_SERIALIZE;
	{D_IDENTIFIER}	=> QUEX_TKN_IDENTIFIER;
	{D_STATEMENT_END}	=> QUEX_TKN_STATEMENT_END;
	{D_CONCATENATION}	=> QUEX_TKN_CONCATENATION;
	"="	=> QUEX_TKN_ASSIGNMENT;
	"+"	=> QUEX_TKN_ADDITION;
	"-"	=> QUEX_TKN_SUBSTRACTION;
	"*"	=> QUEX_TKN_MULTIPLICATION;
	"/"	=> QUEX_TKN_DIVISION;
	"%"	=> QUEX_TKN_MODULO;
	"{"	=> QUEX_TKN_LEFT_BRACE;
	"}"	=> QUEX_TKN_RIGHT_BRACE;
	{D_OUTPUT}	=> QUEX_TKN_OUTPUT;
	//"function"	=>	GOSUB (FUNCTION, QUEX_TKN_FUNCTION_START);
	//"object"	=>	GOSUB (OBJECT, QUEX_TKN_OBJECT_START);
	//{D_NUMBER}				=> QUEX_TKN_NUMBER(number=atof((char*)(Lexeme)));
	//"namespace"	=>	GOSUB (NAMESPACE, QUEX_TKN_NAMESPACE_START);	

	//{D_QUOTE_SINGLE}	=> GOSUB (STRING_ABSOLUTE, QUEX_TKN_STRING_ABSOLUTE_START);
	//{D_QUOTE_DOUBLE}	=> GOSUB (STRING_RELATIVE, QUEX_TKN_STRING_RELATIVE_START);
}
