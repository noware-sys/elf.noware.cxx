/root/Documents/C++/NoWare/noware (1)/machine/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (1)/machine/memory.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (1)/machine/memory.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (1)/machine/memory.c++:143:		//mpi_.listen_async (& LIB::::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (1)/machine/memory.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:955:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:957:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:960:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:962:	listen_async_internal (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:965:void LIB::network::mpi::listen_async_internal (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle, unsigned long int hash)
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:1137:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:1138:			listen_async_internal (handler, broadcast_address, port, cycle, hash, handler_index);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:1296:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:1298:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).cpp:1301:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).hpp:176:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).hpp:177:					void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).hpp:179:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (2).hpp:180:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:845:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:847:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:850:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:985:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:986:			listen_async (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:1161:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:1163:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).cpp:1166:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).hpp:174:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).hpp:177:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging (1).hpp:178:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1197:			handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, address, port, handler, cycle, hash));
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1239:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1241:	return listen_async (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1244:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1246:	return listen_async (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1249:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1251:	return listen_async (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1254:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1256:	return listen_async (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1259:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1261:	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1264:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1266:	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1269:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1271:	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1274:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1276:	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1279:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1281:	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1284:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1286:	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1289:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1290://bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & broadcast_address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1304:	handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1310:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1312:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1315:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1317:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1320:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1322:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1325:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1327:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1330:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1332:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1335:void LIB::network::mpi::listen_async_handler (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1391:				handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1438:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1440:	return listen_async_stop (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1443:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1445:	return listen_async_stop (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1448:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1450:	return listen_async_stop (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1453:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1455:	return listen_async_stop (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1458:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1460:	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1463:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1465:	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1468:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1470:	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1473:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1475:	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1478:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1480:	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1483:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1485:	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1488:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1489://bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1521:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1523:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1526:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1528:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1531:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1533:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1536:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1538:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1541:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (1)/network/messaging.c++:1543:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:101:					void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:229:					//bool listen_async (const boost::function <void (std::string)> &, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:230:					//bool listen_async (const boost::function <void (std::string)> &, const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:231:					//void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:232:					bool listen_async (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:233:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:234:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:235:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:236:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:237:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:238:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:239:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:240:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:241:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:243:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:244:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:245:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:246:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:247:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:248:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:250:					//bool listen_async_stop (const boost::function <void (std::string)> &, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:251:					//bool listen_async_stop (const boost::function <void (std::string)> &, const std::string & /* address*/, const unsigned short int & /* Port. */, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:252:					bool listen_async_stop (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:253:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:254:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:255:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:256:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:257:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:258:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:259:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:260:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:261:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:262:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:263:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:264:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:265:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:266:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (1)/network/messaging.h++:267:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:845:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:847:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:850:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:985:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:986:			listen_async (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:1161:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:1163:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).cpp:1166:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).hpp:174:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).hpp:177:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (1).hpp:178:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:955:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:957:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:960:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:962:	listen_async_internal (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:965:void LIB::network::mpi::listen_async_internal (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle, unsigned long int hash)
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:1137:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:1138:			listen_async_internal (handler, broadcast_address, port, cycle, hash, handler_index);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:1296:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:1298:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).cpp:1301:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).hpp:176:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).hpp:177:					void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).hpp:179:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/messaging (2).hpp:180:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1262://			handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, address, port, handler, cycle, hash));
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1304:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1306:	return listen_async (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1309:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1311:	return listen_async (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1314:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1316:	return listen_async (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1319:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1321:	return listen_async (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1324:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1326:	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1329:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1331:	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1334:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1336:	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1339:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1341:	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1344:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1346:	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1349:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1351:	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1354:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1355://bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & broadcast_address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1369:	handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1375:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1377:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1380:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1382:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1385:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1387:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1390:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1392:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1395:bool LIB::network::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1397:	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1400:void LIB::network::mpi::listen_async_handler (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1431://				handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1441:				handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1492://				handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1524:			std::cout << "Messaging.cpp (std::exception & e): \'Listen_async_handler\': Error: " << e.what () << std::endl;
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1532:			std::cout << "Messaging.cpp (...): \'Listen_async_handler\': Error." << std::endl;
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1539:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1541:	return listen_async_stop (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1544:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1546:	return listen_async_stop (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1549:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1551:	return listen_async_stop (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1554:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1556:	return listen_async_stop (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1559:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1561:	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1564:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1566:	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1569:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1571:	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1574:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1576:	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1579:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1581:	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1584:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1586:	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1589:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1590://bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1622:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1624:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1627:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1629:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1632:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1634:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1637:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1639:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1642:bool LIB::network::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (2)/network/mpi.c++:1644:	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:101:					void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:229:					//bool listen_async (const boost::function <void (std::string)> &, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:230:					//bool listen_async (const boost::function <void (std::string)> &, const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:231:					//void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:232:					bool listen_async (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:233:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:234:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:235:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:236:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:237:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:238:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:239:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:240:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:241:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:243:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:244:					bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:245:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:246:					bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:247:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:248:					bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:250:					//bool listen_async_stop (const boost::function <void (std::string)> &, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:251:					//bool listen_async_stop (const boost::function <void (std::string)> &, const std::string & /* address*/, const unsigned short int & /* Port. */, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:252:					bool listen_async_stop (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:253:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:254:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:255:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:256:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:257:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:258:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:259:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:260:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:261:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:262:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:263:					bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:264:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:265:					bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:266:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (2)/network/mpi.h++:267:					bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (2)/cluster/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (2)/cluster/resources/memory.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (2)/cluster/resources/memory.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (2)/cluster/resources/memory.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (2)/cluster/resources/memory.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine (1)/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine (1)/resources/memory.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine (1)/resources/memory.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine (1)/resources/memory.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine (1)/resources/memory.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/memory.2.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/memory.2.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/memory.2.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/memory.2.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Network All-Inclusive).c++:50:	// mpi_.listen_async (& /*LIB::machine::devices::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (Network All-Inclusive).c++:139:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Network All-Inclusive).c++:149:		//mpi_.listen_async (& LIB::machine::devices::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (Network All-Inclusive).c++:150:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Network All-Inclusive).c++:164:		//mpi_.listen_async (& LIB::machine::devices::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (Network All-Inclusive).c++:165:		mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:50:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:139:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:150:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:151:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:152:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:169:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:170:		// mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (Backup).c++:171:		//mpi_.listen_async_stop ();
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:167:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:256:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:267:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:268:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:269:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:278:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:279:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory (NTT).c++:280:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:179:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:270:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:288:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:289:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:290:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:312:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:313:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.1.c++:314:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:179:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:270:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:288:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:289:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:290:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:312:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:313:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/memory.bak.2.c++:314:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:179:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:270:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:288:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:289:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:290:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:312:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:313:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/resources/previous.1/memory.c++:314:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware/machine/machine.c++:206:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::machine::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware/cluster.c++:938:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::cluster::listen), this, _1));
/root/Documents/C++/NoWare/noware/cluster.c++:939:		mpi.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::cluster::input), this, _1, _2));
/root/Documents/C++/NoWare/noware/cluster.c++:980:		//mpi -> listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::cluster::listen), this, _1));
/root/Documents/C++/NoWare/noware/cluster.c++:982:		mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::cluster::input), this, _1, _2));
/root/Documents/C++/NoWare/noware/cluster/machine (standalone).c++:168:		mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware/cluster/machine (standalone).c++:233:			mpi -> listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware/cluster/members (2).c++:26:	mpi.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::members::input), this, _1, _2));
/root/Documents/C++/NoWare/noware/cluster/members (2).c++:33:	//mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::members::input), this, _1, _2));
/root/Documents/C++/NoWare/noware/cluster/machine.bak.1.c++:206:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:845:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:847:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:850:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:985:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:986:			listen_async (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:1161:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:1163:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).cpp:1166:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).hpp:174:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).hpp:177:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (1).hpp:178:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:955:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:957:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:960:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:962:	listen_async_internal (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:965:void LIB::network::mpi::listen_async_internal (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle, unsigned long int hash)
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:1137:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:1138:			listen_async_internal (handler, broadcast_address, port, cycle, hash, handler_index);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:1296:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:1298:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).cpp:1301:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).hpp:176:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).hpp:177:					void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).hpp:179:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/messaging (2).hpp:180:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:1511:	//			handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, address, port, handler, cycle, hash));
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2183:////			handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, address, port, handler, cycle, hash));
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2226://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2228://	return listen_async (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2231://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2233://	return listen_async (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2236://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2238://	return listen_async (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2241://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2243://	return listen_async (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2246://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2248://	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2251://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2253://	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2256://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2258://	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2261://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2263://	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2266://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2268://	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2271://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2273://	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2276://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2277:////bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & broadcast_address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2291://	handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2297://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2299://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2302://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2304://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2307://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2309://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2312://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2314://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2317://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2319://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2322://void LIB::network::ip::mpi::listen_async_handler (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2353:////				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2363://				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2414:////				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2446://			std::cout << "Messaging.cpp (std::exception & e): \'Listen_async_handler\': Error: " << e.what () << std::endl;
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2454://			std::cout << "Messaging.cpp (...): \'Listen_async_handler\': Error." << std::endl;
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2461://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2463://	return listen_async_stop (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2466://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2468://	return listen_async_stop (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2471://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2473://	return listen_async_stop (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2476://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2478://	return listen_async_stop (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2481://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2483://	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2486://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2488://	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2491://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2493://	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2496://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2498://	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2501://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2503://	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2506://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2508://	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2511://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2512:////bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2544://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2546://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2549://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2551://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2554://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2556://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2559://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2561://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2564://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware/network/ip/mpi.c++:2566://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:125:							// // void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:309:							//bool listen_async (const boost::function <void (std::string)> &, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:310:							//bool listen_async (const boost::function <void (std::string)> &, const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:311:							//void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:313://							bool listen_async (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:314://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:315://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:316://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:317://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:318://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:319://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:320://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:321://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:322://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:324://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:325://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:326://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:327://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:328://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:329://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:331://							//bool listen_async_stop (const boost::function <void (std::string)> &, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:332://							//bool listen_async_stop (const boost::function <void (std::string)> &, const std::string & /* address*/, const unsigned short int & /* Port. */, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:333://							bool listen_async_stop (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:334://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:335://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:336://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:337://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:338://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:339://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:340://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:341://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:342://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:343://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:344://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:345://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:346://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:347://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware/network/ip/mpi.h++:348://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware/network/mpi.c++:277:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> & handler)
/root/Documents/C++/NoWare/noware/network/mpi.c++:279:	return listen_async (handler, addrs.listen, default_cycle);
/root/Documents/C++/NoWare/noware/network/mpi.c++:282:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> & handler, const LIB::containers::NTT <> & address)
/root/Documents/C++/NoWare/noware/network/mpi.c++:284:	return listen_async (handler, address, default_cycle);
/root/Documents/C++/NoWare/noware/network/mpi.c++:287:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/mpi.c++:289:	return listen_async (handler, addrs.listen, cycle);
/root/Documents/C++/NoWare/noware/network/mpi.c++:292:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> & handler, const LIB::containers::NTT <> & address, const bool & cycle)
/root/Documents/C++/NoWare/noware/network/mpi.c++:302:	handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, cycle, hash));
/root/Documents/C++/NoWare/noware/network/mpi.c++:308:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> & handler, const bool & cycle, const LIB::containers::NTT <> & address)
/root/Documents/C++/NoWare/noware/network/mpi.c++:310:	return listen_async (handler, address, cycle);
/root/Documents/C++/NoWare/noware/network/mpi.c++:314:bool LIB::network::mpi::listen_async_stop (void)
/root/Documents/C++/NoWare/noware/network/mpi.c++:316:	return listen_async_stop (addrs.listen);
/root/Documents/C++/NoWare/noware/network/mpi.c++:319:bool LIB::network::mpi::listen_async_stop (const LIB::containers::NTT <> & address)
/root/Documents/C++/NoWare/noware/network/mpi.c++:368:void LIB::network::mpi::listen_async_handler (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> & handler, LIB::containers::NTT <> & address, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware/network/mpi.c++:378:			handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, cycle, hash));
/root/Documents/C++/NoWare/noware/network/mpi.h++:150:							// void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware/network/mpi.h++:152:							void listen_async_handler (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> &/* handler*/, LIB::containers::NTT <> &/* address*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware/network/mpi.h++:199:							const bool listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> &);
/root/Documents/C++/NoWare/noware/network/mpi.h++:200:							const bool listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> &, const LIB::containers::NTT <> &/* address*/);
/root/Documents/C++/NoWare/noware/network/mpi.h++:201:							const bool listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/mpi.h++:202:							const bool listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> &, const LIB::containers::NTT <> &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware/network/mpi.h++:203:							const bool listen_async (const boost::function <void (const LIB::containers::NTT <> &, const std::string &)> &, const bool &/* cycle*/, const LIB::containers::NTT <> &/* address*/);
/root/Documents/C++/NoWare/noware/network/mpi.h++:205:							const bool listen_async_stop (void);
/root/Documents/C++/NoWare/noware/network/mpi.h++:206:							const bool listen_async_stop (const LIB::containers::NTT <> &/* address*/);
/root/Documents/C++/NoWare/noware/communication/messaging.c++:84:	mpi.listen_async (boost::bind (boost::mem_fn (& LIB::communication::messaging::__receive), this, _1, _2));
/root/Documents/C++/NoWare/noware/communication/messaging.c++:90:	//mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::members::__receive), this, _1, _2));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine (1)/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine (1)/resources/memory.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine (1)/resources/memory.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine (1)/resources/memory.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine (1)/resources/memory.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster.c++:938:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::cluster::listen), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster.c++:939:		mpi.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::cluster::input), this, _1, _2));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster.c++:980:		//mpi -> listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::cluster::listen), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster.c++:982:		mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::cluster::input), this, _1, _2));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster/machine (standalone).c++:168:		mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster/machine (standalone).c++:233:			mpi -> listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/cluster/machine.c++:206:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:179:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:270:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:288:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:289:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:290:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:312:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:313:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory.c++:314:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:50:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:139:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:150:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:151:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:152:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:169:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:170:		// mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Backup).c++:171:		//mpi_.listen_async_stop ();
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Network All-Inclusive).c++:50:	// mpi_.listen_async (& /*LIB::machine::devices::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Network All-Inclusive).c++:139:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Network All-Inclusive).c++:149:		//mpi_.listen_async (& LIB::machine::devices::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Network All-Inclusive).c++:150:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Network All-Inclusive).c++:164:		//mpi_.listen_async (& LIB::machine::devices::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (Network All-Inclusive).c++:165:		mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:167:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:256:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:267:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:268:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:269:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:278:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:279:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/resources/memory (NTT).c++:280:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/memory.2.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/memory.2.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/memory.2.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (cluster (machine))/machine/memory.2.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:845:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:847:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:850:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:985:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:986:			listen_async (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:1161:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:1163:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).cpp:1166:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).hpp:174:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).hpp:177:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (1).hpp:178:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:955:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:957:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:960:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:962:	listen_async_internal (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:965:void LIB::network::mpi::listen_async_internal (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle, unsigned long int hash)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:1137:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:1138:			listen_async_internal (handler, broadcast_address, port, cycle, hash, handler_index);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:1296:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:1298:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).cpp:1301:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).hpp:176:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).hpp:177:					void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).hpp:179:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/messaging (2).hpp:180:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:117:							// // void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:272:							//bool listen_async (const boost::function <void (std::string)> &, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:273:							//bool listen_async (const boost::function <void (std::string)> &, const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:274:							//void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:276://							bool listen_async (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:277://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:278://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:279://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:280://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:281://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:282://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:283://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:284://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:285://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:287://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:288://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:289://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:290://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:291://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:292://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:294://							//bool listen_async_stop (const boost::function <void (std::string)> &, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:295://							//bool listen_async_stop (const boost::function <void (std::string)> &, const std::string & /* address*/, const unsigned short int & /* Port. */, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:296://							bool listen_async_stop (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:297://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:298://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:299://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:300://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:301://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:302://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:303://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:304://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:305://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:306://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:307://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:308://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:309://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:310://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.h++:311://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1831://			handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, address, port, handler, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1873://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1875://	return listen_async (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1878://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1880://	return listen_async (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1883://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1885://	return listen_async (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1888://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1890://	return listen_async (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1893://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1895://	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1898://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1900://	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1903://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1905://	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1908://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1910://	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1913://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1915://	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1918://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1920://	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1923://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1924:////bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & broadcast_address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1938://	handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1944://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1946://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1949://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1951://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1954://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1956://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1959://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1961://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1964://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1966://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:1969://void LIB::network::ip::mpi::listen_async_handler (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2000:////				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2010://				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2061:////				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2093://			std::cout << "Messaging.cpp (std::exception & e): \'Listen_async_handler\': Error: " << e.what () << std::endl;
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2101://			std::cout << "Messaging.cpp (...): \'Listen_async_handler\': Error." << std::endl;
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2108://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2110://	return listen_async_stop (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2113://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2115://	return listen_async_stop (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2118://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2120://	return listen_async_stop (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2123://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2125://	return listen_async_stop (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2128://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2130://	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2133://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2135://	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2138://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2140://	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2143://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2145://	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2148://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2150://	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2153://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2155://	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2158://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2159:////bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2191://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2193://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2196://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2198://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2201://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2203://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2206://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2208://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2211://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/ip/mpi.c++:2213://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:272:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:274:	return listen_async (handler, addrs.listen, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:277:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const LIB::entity <> & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:279:	return listen_async (handler, address, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:282:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:284:	return listen_async (handler, addrs.listen, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:287:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const LIB::entity <> & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:297:	handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:303:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const bool & cycle, const LIB::entity <> & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:305:	return listen_async (handler, address, cycle);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:309:bool LIB::network::mpi::listen_async_stop (void)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:311:	return listen_async_stop (addrs.listen);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:314:bool LIB::network::mpi::listen_async_stop (const LIB::entity <> & address)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:363:void LIB::network::mpi::listen_async_handler (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, LIB::entity <> & address, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.c++:373:			handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, cycle, hash));
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:140:							// void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:142:							void listen_async_handler (const boost::function <void (const LIB::entity <> &, const std::string &)> &/* handler*/, LIB::entity <> &/* address*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:189:							bool listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> &);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:190:							bool listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> &, const LIB::entity <> &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:191:							bool listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:192:							bool listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> &, const LIB::entity <> &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:193:							bool listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> &, const bool &/* cycle*/, const LIB::entity <> &/* address*/);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:195:							bool listen_async_stop (void);
/root/Documents/C++/NoWare/noware (cluster (machine))/network/mpi.h++:196:							bool listen_async_stop (const LIB::entity <> &/* address*/);
/root/Documents/C++/NoWare/noware (3)/machine (1)/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine (1)/resources/memory.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine (1)/resources/memory.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine (1)/resources/memory.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine (1)/resources/memory.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/communication/messaging.c++:178:	mpi.listen_async (boost::bind (boost::mem_fn (& LIB::communication::messaging::__receive), this, _1, _2));
/root/Documents/C++/NoWare/noware (3)/communication/messaging.c++:184:	//mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::members::__receive), this, _1, _2));
/root/Documents/C++/NoWare/noware (3)/cluster.c++:938:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::cluster::listen), this, _1));
/root/Documents/C++/NoWare/noware (3)/cluster.c++:939:		mpi.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::cluster::input), this, _1, _2));
/root/Documents/C++/NoWare/noware (3)/cluster.c++:980:		//mpi -> listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::cluster::listen), this, _1));
/root/Documents/C++/NoWare/noware (3)/cluster.c++:982:		mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::cluster::input), this, _1, _2));
/root/Documents/C++/NoWare/noware (3)/cluster/machine (standalone).c++:168:		mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware (3)/cluster/machine (standalone).c++:233:			mpi -> listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware (3)/cluster/machine.c++:206:		//mpi -> listen_async (boost::bind (boost::mem_fn (& LIB::cluster::machine::listen), this, _1));
/root/Documents/C++/NoWare/noware (3)/cluster/members (2).c++:26:	mpi.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::members::input), this, _1, _2));
/root/Documents/C++/NoWare/noware (3)/cluster/members (2).c++:33:	//mpi.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::members::input), this, _1, _2));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:179:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:270:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:288:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:289:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:290:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:312:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:313:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory.c++:314:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:179:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:270:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:288:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:289:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:290:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:312:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:313:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (1).c++:314:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:50:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:139:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:150:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:151:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:152:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:169:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:170:		// mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Backup).c++:171:		//mpi_.listen_async_stop ();
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Network All-Inclusive).c++:50:	// mpi_.listen_async (& /*LIB::machine::devices::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Network All-Inclusive).c++:139:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Network All-Inclusive).c++:149:		//mpi_.listen_async (& LIB::machine::devices::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Network All-Inclusive).c++:150:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Network All-Inclusive).c++:164:		//mpi_.listen_async (& LIB::machine::devices::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (Network All-Inclusive).c++:165:		mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::devices::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:167:	// mpi_.listen_async (& /*LIB::machine::resources::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:256:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:267:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:268:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:269:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:278:		//mpi_.listen_async (& LIB::machine::resources::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:279:		// mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/resources/memory (NTT).c++:280:		//mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::machine::resources::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/memory (1).cpp:41:	mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/memory.2.c++:48:	// mpi_.listen_async (& /*LIB::cluster::memory::*/act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/memory.2.c++:134:	//mpi_.listen_async_stop (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_direct), this, _1));
/root/Documents/C++/NoWare/noware (3)/machine/memory.2.c++:143:		//mpi_.listen_async (& LIB::cluster::memory::act_broadcast);
/root/Documents/C++/NoWare/noware (3)/machine/memory.2.c++:144:		mpi_.listen_async (boost::bind (boost::mem_fn (& LIB::cluster::memory::act_broadcast), this, _1));
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:845:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:847:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:850:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:985:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:986:			listen_async (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:1161:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:1163:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).cpp:1166:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).hpp:174:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).hpp:177:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (1).hpp:178:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:955:void LIB::network::mpi::listen_async (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:957:	listen_async ((* handler), udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:960:void LIB::network::mpi::listen_async (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:962:	listen_async_internal (handler, broadcast_address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:965:void LIB::network::mpi::listen_async_internal (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle, unsigned long int hash)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:1137:			//listen_async_handler (socket, /*acceptor, */endpoint, handler, version, broadcast_address, port, cycle/*, port, version*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:1138:			listen_async_internal (handler, broadcast_address, port, cycle, hash, handler_index);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:1296:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:1298:	listen_async_stop (handler, udp.address, udp.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).cpp:1301:bool LIB::network::mpi::listen_async_stop (void (* handler) (std::string), const std::string & broadcast_address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).hpp:175:					void listen_async (void (*/* handler function*/) (std::string), const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).hpp:176:					void listen_async (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool &/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).hpp:177:					void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).hpp:179:					bool listen_async_stop (void (*/* handler function*/) (std::string), const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/messaging (2).hpp:180:					bool listen_async_stop (void (*/* handler function*/) (std::string), const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool & /* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:117:							// // void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:278:							//bool listen_async (const boost::function <void (std::string)> &, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:279:							//bool listen_async (const boost::function <void (std::string)> &, const std::string & /* Broadcast address. */, const unsigned short int & /* Port. */, const bool/* cycle*/ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:280:							//void LIB::network::mpi::listen_async_internal (void (*/*handler*/) (std::string), const std::string &/*broadcast_address*/, const unsigned short int & /*port*/, const bool &/*cycle*/, unsigned long int /*hash*/ = 0, unsigned long long int/* handler_index*/ = 0);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:282://							bool listen_async (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:283://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:284://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:285://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:286://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:287://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:288://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:289://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:290://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:291://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:293://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:294://							bool listen_async (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:295://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:296://							bool listen_async (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:297://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:298://							bool listen_async (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:300://							//bool listen_async_stop (const boost::function <void (std::string)> &, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:301://							//bool listen_async_stop (const boost::function <void (std::string)> &, const std::string & /* address*/, const unsigned short int & /* Port. */, const bool/* cycle */ = DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:302://							bool listen_async_stop (const boost::function <void (std::string)> &);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:303://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:304://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:305://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:306://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:307://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:308://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:309://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int &/* port*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:310://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:311://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int &/* port*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:312://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const unsigned short int & /* port. */, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:313://							bool listen_async_stop (const boost::function <void (std::string)> &, const std::string &/* address*/, const bool &/* cycle*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:314://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const std::string &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:315://							bool listen_async_stop (const boost::function <void (std::string)> &, const unsigned short int & /* port. */, const bool &/* cycle*/, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:316://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const std::string &/* address*/, const unsigned short int & /* port. */);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.h++:317://							bool listen_async_stop (const boost::function <void (std::string)> &, const bool &/* cycle*/, const unsigned short int & /* port. */, const std::string &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1863://			handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, address, port, handler, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1905://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1907://	return listen_async (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1910://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1912://	return listen_async (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1915://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1917://	return listen_async (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1920://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1922://	return listen_async (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1925://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1927://	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1930://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1932://	return listen_async (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1935://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1937://	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1940://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1942://	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1945://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1947://	return listen_async (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1950://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1952://	return listen_async (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1955://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1956:////bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & broadcast_address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1970://	handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1976://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1978://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1981://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1983://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1986://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1988://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1991://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1993://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1996://bool LIB::network::ip::mpi::listen_async (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:1998://	return listen_async (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2001://void LIB::network::ip::mpi::listen_async_handler (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2032:////				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2042://				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2093:////				handlers [hash] = new boost::thread (boost::bind (& LIB::network::ip::mpi::listen_async_handler, this, handler, address, port, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2125://			std::cout << "Messaging.cpp (std::exception & e): \'Listen_async_handler\': Error: " << e.what () << std::endl;
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2133://			std::cout << "Messaging.cpp (...): \'Listen_async_handler\': Error." << std::endl;
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2140://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2142://	return listen_async_stop (handler, udp_listen.address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2145://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2147://	return listen_async_stop (handler, address, udp_listen.port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2150://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2152://	return listen_async_stop (handler, udp_listen.address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2155://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2157://	return listen_async_stop (handler, udp_listen.address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2160://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2162://	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2165://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2167://	return listen_async_stop (handler, address, port, DEFAULT_CYCLE);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2170://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2172://	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2175://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2177://	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2180://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2182://	return listen_async_stop (handler, address, udp_listen.port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2185://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2187://	return listen_async_stop (handler, udp_listen.address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2190://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2191:////bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const unsigned short int & port, const bool cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2223://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const std::string & address, const bool & cycle, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2225://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2228://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const std::string & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2230://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2233://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const unsigned short int & port, const bool & cycle, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2235://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2238://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const std::string & address, const unsigned short int & port)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2240://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2243://bool LIB::network::ip::mpi::listen_async_stop (const boost::function <void (std::string)> & handler, const bool & cycle, const unsigned short int & port, const std::string & address)
/root/Documents/C++/NoWare/noware (3)/network/ip/mpi.c++:2245://	return listen_async_stop (handler, address, port, cycle);
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:272:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:274:	return listen_async (handler, addrs.listen, default_cycle);
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:277:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const LIB::entity <> & address)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:279:	return listen_async (handler, address, default_cycle);
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:282:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:284:	return listen_async (handler, addrs.listen, cycle);
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:287:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const LIB::entity <> & address, const bool & cycle)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:297:	handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:303:bool LIB::network::mpi::listen_async (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, const bool & cycle, const LIB::entity <> & address)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:305:	return listen_async (handler, address, cycle);
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:309:bool LIB::network::mpi::listen_async_stop (void)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:311:	return listen_async_stop (addrs.listen);
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:314:bool LIB::network::mpi::listen_async_stop (const LIB::entity <> & address)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:363:void LIB::network::mpi::listen_async_handler (const boost::function <void (const LIB::entity <> &, const std::string &)> & handler, LIB::entity <> & address, const bool & cycle, const unsigned long int & hash)
/root/Documents/C++/NoWare/noware (3)/network/mpi.c++:373:			handlers [hash] = new boost::thread (boost::bind (& LIB::network::mpi::listen_async_handler, this, handler, address, cycle, hash));
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:142:							// void listen_async_handler (const boost::function <void (std::string)> &/* handler*/, const std::string &/* address*/, const unsigned short int &/* port*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:144:							void listen_async_handler (const boost::function <void (const LIB::NTT <> &, const std::string &)> &/* handler*/, LIB::NTT <> &/* address*/, const bool &/* cycle*/, const unsigned long int &/* hash*/);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:191:							bool listen_async (const boost::function <void (const LIB::NTT <> &, const std::string &)> &);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:192:							bool listen_async (const boost::function <void (const LIB::NTT <> &, const std::string &)> &, const LIB::NTT <> &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:193:							bool listen_async (const boost::function <void (const LIB::NTT <> &, const std::string &)> &, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:194:							bool listen_async (const boost::function <void (const LIB::NTT <> &, const std::string &)> &, const LIB::NTT <> &/* address*/, const bool &/* cycle*/);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:195:							bool listen_async (const boost::function <void (const LIB::NTT <> &, const std::string &)> &, const bool &/* cycle*/, const LIB::NTT <> &/* address*/);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:197:							bool listen_async_stop (void);
/root/Documents/C++/NoWare/noware (3)/network/mpi.h++:198:							bool listen_async_stop (const LIB::NTT <> &/* address*/);
