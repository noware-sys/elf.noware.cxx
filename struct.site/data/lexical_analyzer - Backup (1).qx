start = MAIN;

header
{
	#include <cstdlib>	// For atoi (), atof () and other things.
}

/*
	()	Parantheses
	[]	Brackets
	{}	Braces
	⟨⟩		Chevrons
	<>	Inequality signs
	&		Ampersand
	^		Caret
*/

define
{
	// Note: "D" stands for "definition".

	D_NEW_LINE							\r?\n
	//D_WHITESPACE						[ \t(\r?\n)\v\f]+	// Replaced by [:space:]?
	D_WHITESPACE						[[:space:]]+

	D_COMMENT_BLOCK						"//"
	D_COMMENT_STREAM_BEGINNING			"/*"
	D_COMMENT_STREAM_ENDING				"*/"
/*	
	// Preprocessor definitions:
	D_INCLUDE							"#include"
	//D_DEFINE							"#define"
	D_SERIALIZE							"#serialize"


	D_STANDARD_INPUT					"cin"
	D_STANDARD_OUTPUT					"cout"

	//D_END_OF_LINE						"endl"
*/
	D_NUMBER							(\+|-)?[[:digit:]]+((\.|,)[[:digit:]]*)?	// A real number.
	D_IDENTIFIER						\$[_[:alnum:]]+	// The name of a variable.
	
	// Keywords:
	D_OBJECT							"object"

/*
	// Stream operators:
	D_INSERTER							"<<"
	D_EXTRACTOR							">>"

	// Brackets:
	D_PARANTHESIS_OPEN					"("
	D_PARANTHESIS_CLOSE					")"
	D_BRACKET_OPEN						"["
	D_BRACKET_CLOSE						"]"
	D_BRACE_OPEN						"{"
	D_BRACE_CLOSE						"}"
	D_COLON								":"
	D_SEMICOLON							";"
	D_ACCENT_GRAVE						"`"	// Also known as a backtick.
	D_QUOTE_SINGLE						"'"
	D_QUOTE_DOUBLE						"\""
	D_COMMA								","
	D_DOT_BASELINE						"."
	D_EXCLAMATION_MARK					"!"
	D_TILDE								"~"
	D_PER_CENT							"%"
	D_PER_MILLE							"%"
	D_ASTERISK							"*"
	D_CARET								"^"
	D_AMPERSAND							"&"
	D_PIPE								"|"
	D_EQUALITY_SIGN						"="
*/	
	//D_BACKSLASHED_QUOTE_SINGLE			"\\'"	//	\"
	D_BACKSLASHED_QUOTE_DOUBLE			"\\\""	//	\"
	D_BACKSLASHED_BACKSLASH				"\\\\"	//	\\
/*
	D_COMPARISON_EQUALITY				"=="
	
	/*
		A === B

		A == B && (same type of objects)?
	*/
	D_COMPARISON_EQUALITY_STRICT		"==="

	D_COMPARISON_INEQUALITY				"!="

	/*
		Strict inequality is considered to be true
		if (A == B && !(A === B))?
	*/
	D_COMPARISON_INEQUALITY_STRICT		"!=="

	D_COMPARISON_GREATER				"<"
	D_COMPARISON_LOWER					">"

	D_COMPARISON_GREATER_OR_EQUAL		"<="
	D_COMPARISON_LOWER_OR_EQUAL			">="

	// Condition keywords:
	D_IF								"if"
	D_ELSE								"else"
	
	// Looping:
	D_WHILE								"while"
	D_DO								"do"
	D_FOR								"for"
	D_GO_TO								"goto"


	D_NAMESPACE							"namespace"

	// Objects' members' access control:
	D_PUBLIC							"public:"
	D_PROTECTED							"protected:"
	D_PRIVATE							"private:"
*/
}

token
{
	WHITESPACE;

	COMMENT_BLOCK;
	COMMENT_STREAM_BEGINNING;
	COMMENT_STREAM_ENDING;

	// Preprocessor definitions:
	INCLUDE;
	DEFINE;
	SERIALIZE;


	STANDARD_INPUT;
	STANDARD_OUTPUT;

	// Stream operators:
	INSERTER;
	EXTRACTOR;

	// Keywords:
	OBJECT;

	// Brackets:
	PARANTHESIS_OPEN;
	PARANTHESIS_CLOSE;
	BRACKET_OPEN;
	BRACKET_CLOSE;
	BRACE_OPEN;
	BRACE_CLOSE;
	NUMBER;
	IDENTIFIER;

	SEMICOLON;
	QUOTE_SINGLE;
	QUOTE_DOUBLE;

	BACKSLASHED_QUOTE_DOUBLE;
	BACKSLASHED_BACKSLASH;

	ASSIGNMENT;

	NEGATION;
	COMPLEMENT;
	DESTRUCTOR;
	MODULO;
	EXPONENTIATION;

	COMPARISON_EQUALITY;
	COMPARISON_EQUALITY_STRICT;

	COMPARISON_INEQUALITY;

	COMPARISON_GREATER;
	COMPARISON_LOWER;

	COMPARISON_GREATER_OR_EQUAL;
	COMPARISON_LOWER_OR_EQUAL;

	// Control structures:
	// Logical operators:
	AND;
	OR;

	// Condition keywords:
	IF;
	ELSE;
	
	// Looping:
	WHILE;
	DO;
	FOR;
	GO_TO;

	COLON;
	COLON_DOUBLE;
	SEMICOLON;

	NAMESPACE;

	// Objects' members' access control:
	PUBLIC;
	PROTECTED;
	PRIVATE;
}

mode END_OF_FILE :
<inheritable: only>  
{
	<<EOF>>
	{
		self_send(QUEX_TKN_TERMINATION);
		RETURN;
	}
}

mode MAIN : END_OF_FILE
<skip: {D_WHITESPACE}>
<skip_range: {D_COMMENT_STREAM_BEGINNING} {D_COMMENT_STREAM_ENDING}>
<skip_nested_range: {D_COMMENT_STREAM_BEGINNING} {D_COMMENT_STREAM_ENDING}}>
{
	// For block commenting:
	{D_COMMENT_BLOCK}([:inverse({D_NEW_LINE}):]|({D_BACKSLASH}{D_WHITESPACE}*{D_NEW_LINE}))*{D_NEW_LINE}	{ /* We are within a comment. Do not do anything. */ }

	{D_OBJECT}				=> QUEX_TKN_OBJECT;
	{D_PARANTHESIS_OPEN}	=> QUEX_TKN_PARANTHESIS_OPEN;
	{D_PARANTHESIS_CLOSE}	=> QUEX_TKN_PARANTHESIS_CLOSE;
	{D_BRACKET_OPEN}		=> QUEX_TKN_BRACKET_OPEN;
	{D_BRACKET_CLOSE}		=> QUEX_TKN_BRACKET_CLOSE;
	{D_BRACE_OPEN}			=> QUEX_TKN_BRACE_OPEN;
	{D_BRACE_CLOSE}			=> QUEX_TKN_BRACE_CLOSE;
	{D_NUMBER}				=> QUEX_TKN_NUMBER(number=atof((char*)(Lexeme)));
	{D_SEMICOLON}			=> QUEX_TKN_SEMICOLON;

	{D_IDENTIFIER}
	{
		self_send1(QUEX_TKN_IDENTIFIER, Lexeme);
		
		RETURN;
	}

	{D_QUOTES_DOUBLE}
	{
		self << STRING;
	}
}

mode STRING : END_OF_FILE
{
	on_entry
	{
		self_accumulator_clear();
	}
	
	on_exit
	{ 
		self_accumulator_flush(QUEX_TKN_STRING); 
		self_send(QUEX_TKN_QUOTE_DOUBLE);
	}

	{P_BACKSLASHED_BACKSLASH}
	{
		self_accumulator_add(Lexeme, LexemeEnd);
	}

	{D_BACKSLASHED_QUOTE_DOUBLE}
	{
		self_accumulator_add(Lexeme, LexemeEnd);
	}

	{D_QUOTE_DOUBLE}
	{
		self << MAIN;

		RETURN;
	}
	
	<<FAIL>>
	{
		self_accumulator_add(Lexeme, LexemeEnd); 
	}
}

//mode STRING : END_OF_FILE
//	<entry: PROGRAM>
//	<exit:  PROGRAM>
//{
//    on_entry
//	{
//		self_accumulator_clear();
//	}
//    on_exit
//	{ 
//        self_accumulator_flush(QUEX_TKN_STRING); 
//        self_send(QUEX_TKN_QUOTE);
//    }
//
//    {P_BACKSLASHED_STRING_DELIMITER} { self_accumulator_add(Lexeme, LexemeEnd); }
//    {P_BACKSLASHED_BACKSLASH}        { self_accumulator_add(Lexeme, LexemeEnd); }
//
//    {P_STRING_DELIMITER}             { self << PROGRAM; RETURN; }
//
//    <<FAIL>>
//	{
//        self_accumulator_add(Lexeme, LexemeEnd); 
//    }
//}
