/* -*- C++ -*- vim: set syntax=cpp:
 * PURPOSE: File containing definition of token-identifier and
 *          a function that maps token identifiers to a string
 *          name.
 *
 * NOTE: This file has been created automatically by Quex.
 *       Visit quex.org for further info.
 *
 * DATE: Sat Mar 28 15:17:53 2015
 *
 * (C) 2005-2010 Frank-Rene Schaefer
 * ABSOLUTELY NO WARRANTY                                           */
#ifndef __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS_QUEX_LEXICAL_ANALYZER__QUEX_TOKEN__
#define __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS_QUEX_LEXICAL_ANALYZER__QUEX_TOKEN__

#ifndef __QUEX_OPTION_PLAIN_C
#   include<cstdio> 
#else
#   include<stdio.h> 
#endif

/* The token class definition file can only be included after 
 * the definition on TERMINATION and UNINITIALIZED.          
 * (fschaef 12y03m24d: "I do not rememember why I wrote this.")    */
#include "lexical_analyzer-token"

const QUEX_TYPE_TOKEN_ID QUEX_TKN_ADDITION                  = ((QUEX_TYPE_TOKEN_ID)10004);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ASSIGNMENT                = ((QUEX_TYPE_TOKEN_ID)10005);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BACKSLASHED_BACKSLASH     = ((QUEX_TYPE_TOKEN_ID)10006);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BACKSLASHED_QUOTE_DOUBLE  = ((QUEX_TYPE_TOKEN_ID)10007);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BRACE_BEGINNING           = ((QUEX_TYPE_TOKEN_ID)10008);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_BRACE_END                 = ((QUEX_TYPE_TOKEN_ID)10009);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CHARACTER                 = ((QUEX_TYPE_TOKEN_ID)10010);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_CONCATENATION             = ((QUEX_TYPE_TOKEN_ID)10011);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DEDENT                    = ((QUEX_TYPE_TOKEN_ID)10000);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_DIVISION                  = ((QUEX_TYPE_TOKEN_ID)10012);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_ENDL                      = ((QUEX_TYPE_TOKEN_ID)10013);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EQUALITY_ABSOLUTE         = ((QUEX_TYPE_TOKEN_ID)10014);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EQUALITY_RELATIVE         = ((QUEX_TYPE_TOKEN_ID)10015);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_EXPONENTIATION            = ((QUEX_TYPE_TOKEN_ID)10016);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_FAILURE                   = ((QUEX_TYPE_TOKEN_ID)10017);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_FUNCTION_DEFINITION       = ((QUEX_TYPE_TOKEN_ID)10018);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_GREATER                   = ((QUEX_TYPE_TOKEN_ID)10019);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_GREATER_EQUAL             = ((QUEX_TYPE_TOKEN_ID)10020);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_IDENTIFIER                = ((QUEX_TYPE_TOKEN_ID)10021);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_IDENTIFIER_VARIABLE       = ((QUEX_TYPE_TOKEN_ID)10022);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INCLUDE                   = ((QUEX_TYPE_TOKEN_ID)10023);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INDENT                    = ((QUEX_TYPE_TOKEN_ID)10001);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INEQUALITY_ABSOLUTE       = ((QUEX_TYPE_TOKEN_ID)10024);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_INEQUALITY_RELATIVE       = ((QUEX_TYPE_TOKEN_ID)10025);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LOGIC_AND                 = ((QUEX_TYPE_TOKEN_ID)10026);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LOGIC_OR                  = ((QUEX_TYPE_TOKEN_ID)10027);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LOWER                     = ((QUEX_TYPE_TOKEN_ID)10028);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_LOWER_EQUAL               = ((QUEX_TYPE_TOKEN_ID)10029);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MODULO                    = ((QUEX_TYPE_TOKEN_ID)10030);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_MULTIPLICATION            = ((QUEX_TYPE_TOKEN_ID)10031);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NEGATION                  = ((QUEX_TYPE_TOKEN_ID)10032);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NODENT                    = ((QUEX_TYPE_TOKEN_ID)10002);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_NUMBER                    = ((QUEX_TYPE_TOKEN_ID)10033);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_OUTPUT                    = ((QUEX_TYPE_TOKEN_ID)10034);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PARENTHESIS_BEGINNING     = ((QUEX_TYPE_TOKEN_ID)10035);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_PARENTHESIS_END           = ((QUEX_TYPE_TOKEN_ID)10036);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_SERIALIZE                 = ((QUEX_TYPE_TOKEN_ID)10037);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STATEMENT_END             = ((QUEX_TYPE_TOKEN_ID)10038);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRING                    = ((QUEX_TYPE_TOKEN_ID)10039);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRING_ABSOLUTE_BEGINNING = ((QUEX_TYPE_TOKEN_ID)10040);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRING_ABSOLUTE_END       = ((QUEX_TYPE_TOKEN_ID)10041);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRING_RELATIVE_BEGINNING = ((QUEX_TYPE_TOKEN_ID)10042);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_STRING_RELATIVE_END       = ((QUEX_TYPE_TOKEN_ID)10043);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_SUBSTRACTION              = ((QUEX_TYPE_TOKEN_ID)10044);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TAB                       = ((QUEX_TYPE_TOKEN_ID)10045);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_TERMINATION               = ((QUEX_TYPE_TOKEN_ID)0);
const QUEX_TYPE_TOKEN_ID QUEX_TKN_UNINITIALIZED             = ((QUEX_TYPE_TOKEN_ID)10003);


QUEX_NAMESPACE_TOKEN_OPEN
extern const char* QUEX_NAME_TOKEN(map_id_to_name)(const QUEX_TYPE_TOKEN_ID TokenID);
QUEX_NAMESPACE_TOKEN_CLOSE

#endif /* __QUEX_INCLUDE_GUARD__AUTO_TOKEN_IDS_QUEX_LEXICAL_ANALYZER__QUEX_TOKEN__ */
